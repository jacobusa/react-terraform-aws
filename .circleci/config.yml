version: 2.1

executors:
  app-executor:
    docker:
      - image: cimg/node:16.10.0
    working_directory: ~/repo

  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install Dependencies
      command: |
        mkdir -p artifacts
        yarn install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get -y install awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        yarn install
        yarn build
        echo "Build Successful!"
  - &configure-aws-access
    run:
      name: Configure AWS access
      command: |
        mkdir -p ~/.aws
        file=~/.aws/credentials
        echo "[default]" > $file
        echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> $file
        echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> $file 
  - &configure-terraform-cloud
    run:
      name: Configure .terraformrc file locally
      command: |
        echo "credentials \"app.terraform.io\" {token =
        \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc

jobs:
  setup:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Terraform folder
          command: |
            ls
            pwd
            cp -r terraform artifacts/terraform/
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - run:
          name: Run Linting
          command: yarn lint

  # prettify:
  #   executor: app-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch
  #     - *restore-cache
  #     - run:
  #         name: Run Prettier
  #         command: npm run prettify

  terraform-validate:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch
      - *configure-aws-access
      - run:
          name: Terraform Validate and Format
          command: |
            cd terraform/<< parameters.env >>
            terraform init -backend=false
            terraform validate
            terraform fmt -check
  terraform-plan-and-apply:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch
      - *configure-aws-access
      - *configure-terraform-cloud
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform init
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform apply --auto-approve 
            terraform output bucket_id > ../../bucket_id.txt
            terraform output cloudfront_dist_id > ../../cloudfront_dist_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch
      - *install-aws-cli
      - *configure-aws-access
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/bucket_id.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch
      - *install-aws-cli
      - *configure-aws-access
      - *build-project
      - run:
          name: Deploy to AWS CloudFront
          command: |
            AWS_CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_dist_id.txt | sed 's/\"//g')
            echo $AWS_CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi

workflows:
  build_and_deploy:
    jobs:
      - setup
      - linting:
          requires:
            - setup
          filters:
            branches:
              only:
                - main
      # - prettify:
      #     requires:
      #       - setup
      #     filters:
      #       branches:
      #         only:
      #           - main
      - terraform-validate:
          requires:
            - linting
            # - prettify
          env: dev
          filters:
            branches:
              only:
                - main
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          env: dev
          filters:
            branches:
              only:
                - main
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - main
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - main

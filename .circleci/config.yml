version: 2.1
executors:
  app-executor:
    docker:
      - image: cimg/node:16.10.0
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
aliases:
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install Dependencies
      command: |
        mkdir -p artifacts
        yarn install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &build-project-dev
    run:
      name: Build Project
      command: |
        yarn install
        export HEY=$(cat artifacts/hey.txt)
        printenv
        echo $HEY
        yarn build:dev
        echo "Build Successful!"
  - &build-project-prod
    run:
      name: Build Project Production
      command: |
        yarn install
        yarn build:prod
        echo "Build Successful!"
  - &configure-terraform-cloud
    run:
      name: Configure .terraformrc file locally
      command: |
        echo "credentials \"app.terraform.io\" {token =
        \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
orbs:
  aws-cli: circleci/aws-cli@3.1
jobs:
  setup:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Terraform folder
          command: |
            cp -r terraform artifacts/terraform/
            echo hey >> artifacts/hey.txt
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  linting:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - run:
          name: Run Linting
          command: yarn lint
  bump-version:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Bump Version and commit
          command: |
            echo "bumping version"
            CURRENT_VERSION=$(jq -r '.version' package.json)
        # IFS='.' read -ra VERSION_PARTS <<< "0.0.1"
        # IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        # CURRENT_VERSION=$(jq -r '.version' package.json)
        # PATCH_VERSION=${VERSION_PARTS[2]}
        # echo "$PATCH_VERSION"
        # NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
        # echo "$NEW_PATCH_VERSION"
        # NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
        # jq ".version = \"$NEW_VERSION\"" package.json > package.tmp.json && mv package.tmp.json package.json
      # - *build-project-dev
  build:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *build-project-dev
  terraform-validate:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform Validate and Format
          command: |
            cd terraform/<< parameters.env >>
            terraform init -backend=false
            terraform validate
            terraform fmt -check
  terraform-plan:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *configure-terraform-cloud
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform init
            terraform plan
  terraform-destroy:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *configure-terraform-cloud
      - run:
          name: Terraform Destroy
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform init
            terraform destroy --auto-approve
  terraform-plan-and-apply:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *configure-terraform-cloud
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform init
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform apply --auto-approve 
            terraform output bucket_id > ../../<< parameters.env >>_bucket_id.txt
            terraform output cloudfront_dist_id > ../../<< parameters.env >>_cloudfront_dist_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  deploy-to-aws-s3-dev:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - aws-cli/setup
      - *build-project-dev
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/dev_bucket_id.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_BUCKET_NAME} --delete
            fi
  deploy-to-aws-cloudfront-dev:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - aws-cli/setup
      - *build-project-dev
      - run:
          name: Deploy to AWS CloudFront
          command: |
            AWS_CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/dev_cloudfront_dist_id.txt | sed 's/\"//g')
            echo $AWS_CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi
  deploy-to-aws-s3-prod:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - aws-cli/setup
      - *build-project-prod
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/prod_bucket_id.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_BUCKET_NAME} --delete
            fi
  deploy-to-aws-cloudfront-prod:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - aws-cli/setup
      - *build-project-prod
      - run:
          name: Deploy to AWS CloudFront
          command: |
            AWS_CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/prod_cloudfront_dist_id.txt | sed 's/\"//g')
            echo $AWS_CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi
workflows:
  build_and_deploy:
    jobs:
      # - setup:
      #     context: Web
      # - linting:
      #     context: Web
      #     requires:
      #       - setup
      - bump-version:
          context: Web
          # requires:
          #   - linting
      # - build:
      #     context: Web
      #     requires:
      #       - bump-version
      # - terraform-validate:
      #     context: Web
      #     name: terraform-validate-dev
      #     requires:
      #       - build
      #     env: dev
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - terraform-plan-and-apply:
      #     context: Web
      #     name: terraform-plan-and-apply-dev
      #     requires:
      #       - terraform-validate-dev
      #     env: dev
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - deploy-to-aws-s3-dev:
      #     context: Web
      #     requires:
      #       - terraform-plan-and-apply-dev
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - deploy-to-aws-cloudfront-dev:
      #     context: Web
      #     requires:
      #       - deploy-to-aws-s3-dev
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - terraform-destroy:
      #     context: Web
      #     name: terraform-destroy-dev
      #     requires:
      #       - deploy-to-aws-cloudfront-dev
      #     env: dev
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - terraform-validate:
      #     context: Web
      #     name: terraform-validate-prod
      #     requires:
      #       - deploy-to-aws-cloudfront-dev
      #     env: prod
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - terraform-plan:
      #     context: Web
      #     name: terraform-plan-prod
      #     requires:
      #       - terraform-validate-prod
      #     env: prod
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - hold:
      #     type: approval
      #     name: prod-approval
      #     requires:
      #       - terraform-plan-prod
      # - terraform-plan-and-apply:
      #     context: Web
      #     name: terraform-plan-and-apply-prod
      #     requires:
      #       - prod-approval
      #     env: prod
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - deploy-to-aws-s3-prod:
      #     context: Web
      #     requires:
      #       - terraform-plan-and-apply-prod
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - deploy-to-aws-cloudfront-prod:
      #     context: Web
      #     requires:
      #       - deploy-to-aws-s3-prod
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - terraform-destroy:
      #     context: Web
      #     name: terraform-destroy-prod
      #     requires:
      #       - deploy-to-aws-cloudfront-prod
      #     env: prod
      #     filters:
      #       branches:
      #         only:
      #           - main

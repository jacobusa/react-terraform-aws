version: 2.1
executors:
  app-executor:
    docker:
      - image: cimg/node:16.10.0
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
aliases:
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install Dependencies
      command: |
        mkdir -p artifacts
        yarn install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &build-project-dev
    run:
      name: Build Project
      command: |
        yarn install
        yarn build:dev
        echo "Build Successful!"
  - &build-project-prod
    run:
      name: Build Project Production
      command: |
        yarn install
        yarn build:prod
        echo "Build Successful!"
  - &configure-terraform-cloud
    run:
      name: Configure .terraformrc file locally
      command: |
        echo "credentials \"app.terraform.io\" {token =
        \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
orbs:
  aws-cli: circleci/aws-cli@3.1
jobs:
  setup:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Terraform folder
          command: |
            cp -r terraform artifacts/terraform/
      - persist_to_workspace:
          root: ./
          paths:
            - dev/artifacts
            - prod/artifacts
  linting:
    executor: app-executor
    steps:
      - checkout
      - *restore-cache
      - run:
          name: Run Linting
          command: yarn lint
  build:
    executor: app-executor
    steps:
      - checkout
      - *build-project-dev
  terraform-validate:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform Validate and Format
          command: |
            cd terraform/<< parameters.env >>
            terraform init -backend=false
            terraform validate
            terraform fmt -check
  terraform-plan-and-apply:
    parameters:
      env:
        type: string
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./<< parameters.env >>
      - *configure-terraform-cloud
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform init
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/terraform/<< parameters.env >>
            terraform apply --auto-approve 
            terraform output bucket_id > ../../bucket_id.txt
            terraform output cloudfront_dist_id > ../../cloudfront_dist_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - << parameters.env >>artifacts
  deploy-to-aws-s3-dev:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./dev
      - aws-cli/setup
      - *build-project-dev
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/bucket_id.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_BUCKET_NAME} --delete
            fi
  deploy-to-aws-cloudfront-dev:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./dev
      - aws-cli/setup
      - *build-project-dev
      - run:
          name: Deploy to AWS CloudFront
          command: |
            AWS_CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_dist_id.txt | sed 's/\"//g')
            echo $AWS_CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi
  deploy-to-aws-s3-prod:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./prod
      - aws-cli/setup
      - *build-project-prod
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/bucket_id.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_BUCKET_NAME} --delete
            fi
  deploy-to-aws-cloudfront-prod:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./prod
      - aws-cli/setup
      - *build-project-prod
      - run:
          name: Deploy to AWS CloudFront
          command: |
            AWS_CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_dist_id.txt | sed 's/\"//g')
            echo $AWS_CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi
workflows:
  build_and_deploy:
    jobs:
      - setup:
          context: Web
      - linting:
          context: Web
          requires:
            - setup
      - build:
          context: Web
          requires:
            - linting
      - terraform-validate:
          context: Web
          requires:
            - build
          env: dev
          filters:
            branches:
              only:
                - main
      - terraform-plan-and-apply:
          context: Web
          requires:
            - terraform-validate
          env: dev
          filters:
            branches:
              only:
                - main
      - deploy-to-aws-s3-dev:
          context: Web
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - main
      - deploy-to-aws-cloudfront-dev:
          context: Web
          requires:
            - deploy-to-aws-s3-dev
          filters:
            branches:
              only:
                - main
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront-dev
      - terraform-validate:
          context: Web
          requires:
            - build
          env: prod
          filters:
            branches:
              only:
                - main
      - terraform-plan-and-apply:
          context: Web
          requires:
            - terraform-validate
          env: prod
          filters:
            branches:
              only:
                - main
      - deploy-to-aws-s3-prod:
          context: Web
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - main
      - deploy-to-aws-cloudfront-prod:
          context: Web
          requires:
            - deploy-to-aws-s3-prod
          filters:
            branches:
              only:
                - main
